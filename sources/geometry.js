const
    nacaLogoGeometry = "27,10,0,22,8,0,19,5,0,17,0,0,19,-5,0,22,-8,0,27,-10,0,32,-8,0,36,-5,0,37,0,0,36,5,0,32,8,0,0,30,0,-10,28,0,-19,22,0,-25,15,0,-29,5,0,-29,-5,0,-25,-15,0,-19,-22,0,-10,-28,0,0,-30,0,10,-28,0,19,-22,0,25,-15,0,25,15,0,19,22,0,10,28,0,20,-5,14,24,-5,14,20,6,14,24,6,14,20,0,14,12,-5,14,16,-5,14,12,6,14,16,6,14,16,0,14,-1,-5,14,2,-5,14,2,6,14,5,2,14,7,-5,14,11,-5,14,7,6,14,-14,-5,14,-2,-5,14,-14,6,14,-6,2,14,-2,6,14,-6,-1,14,-14,2,14,-14,-1,14,-27,-5,14,-23,-5,14,-24,6,14,-21,2,14,-19,-5,14,-15,-5,14,-19,6,14:1,26,27,28,13,14,15,16,17,18,19,20,21,22,23,24,25,7,6,5,4,3,2;2,3,4,5,6,7,8,9,10,11,12,1;29,30,32,31,38,37,36,34,35,33;39,40,42,43,44,45,41;46,47,50,48,52,49,51,53;54,55,57,58,59,60,56:255,255,255",
    pilotHelmetGeometry = "-3,22,-4,3,20,7,-8,4,9,8,4,9,-8,0,0,-4,0,-11,4,0,-11,3,5,-14,-3,7,-12,4,7,-13,-4,13,-12,4,13,-12,3,13,-14,-9,16,6,-9,6,6,-9,8,1,-9,16,1,-9,13,1,-4,5,-10,-5,13,-9,-7,13,-10,-3,17,-12,-4,21,-4,-9,6,1,-11,14,6,-11,8,6,-11,8,1,-11,14,1,3,22,-4,-3,20,7,5,12,11,-5,12,11,8,0,0,-3,5,-14,-3,13,-14,3,18,-13,-3,18,-13,9,16,6,9,6,6,9,8,1,9,16,1,9,13,1,5,5,-10,5,13,-9,7,13,-10,3,17,-12,4,21,-4,9,6,1,11,14,6,11,8,6,11,8,1,11,14,1:30,2,29,1;30,32,31,2;32,3,4,31;3,5,33,4;5,6,7,33;6,34,8,7;34,9,10,8;9,11,12,10;11,35,13,12;35,37,36,13;37,1,29,36;24,16,18,17,14,15;11,9,19,16,18,20;6,19,9,34;5,16,19,6;11,20,18,21,35;17,14,30,23;20,18,17,23,22,11;30,1,37,35,11,22,23;26,27,24,15;28,25,14,17;26,25,28,27;15,14,25,26;27,28,17,18,16,24;48,39,38,41,42,40;12,44,42,40,43,10;7,8,10,43;33,7,43,40;12,13,45,42,44;41,47,2,38;44,12,46,47,41,42;2,47,46,12,13,36,29;50,39,48,51;52,41,38,49;50,51,52,49;39,50,49,38;51,48,40,42,41,52:255,255,255",
    pilotBodyGeometry = "10,-1,-3,13,0,-2,23,-7,-4,24,-3,-2,10,-1,3,13,0,2,24,-7,3,24,-3,2,-11,-1,-3,-14,0,-2,-23,-7,-4,-24,-3,-2,-11,-1,3,-14,0,2,-25,-7,3,-24,-3,2:1,2,4,3;3,4,8,7;7,8,6,5;5,6,2,1;3,7,5,1;8,4,2,6;9,11,12,10;11,15,16,12;15,16,14,13;13,9,10,14;11,9,13,15;16,14,10,12;11,16,15,13,14,10,9,12:255,255,255",
    shipGeometry = "3,0,-9,3,1,-12,4,0,10,3,4,-11,-3,0,-9,-3,1,-12,-4,0,10,-3,4,-11,5,-4,29,-5,-4,29,-6,-4,16,6,-4,16,28,-15,-23,-28,-15,-23,-26,-14,18,26,-14,18,-8,-4,11,8,-4,11,1,-1,-36,0,0,-36,0,0,-36,-1,-1,-36,3,-2,-37,2,1,-35,-2,1,-35,-3,-2,-37:1,2,4,3;3,4,8,7;7,8,6,5;9,10,11,26,23,12;8,4,24,25;26,11,10,7,8,25;9,12,23,24,4,3;9,3,7,10;18,16,13,23;26,14,15,17;12,18,23;11,26,17;19,22,21,20;23,26,25,24:255,255,255",
    lunaLogoGeometry = "-26,0,0,-43,0,0,-27,-5,0,-39,-5,0,-23,6,0,-46,6,0,-25,1,0,-43,1,0,-4,-5,0,0,-5,0,-4,6,0,0,6,0,-4,0,0,-12,-5,0,-8,-5,0,-12,6,0,-8,6,0,-8,0,0,-26,-5,0,-22,-5,0,-22,6,0,-20,2,0,-17,-5,0,-13,-5,0,-17,6,0,0,6,0,0,-5,0,12,6,0,8,-1,0,12,-5,0,4,-1,0,8,6,0,4,6,0,13,-5,0,25,-5,0,21,6,0,25,6,0,21,-1,0,13,-1,0,26,0,0,42,0,0,26,-5,0,39,-5,0,26,6,0,46,6,0,26,1,0,43,1,0,0,32,0,-6,31,0,-12,28,0,-18,24,0,-22,19,0,-25,11,0,-24,18,0,-22,24,0,-18,29,0,-12,33,0,-6,36,0,0,37,0,6,36,0,12,33,0,18,29,0,22,24,0,24,18,0,25,11,0,22,19,0,18,24,0,12,28,0,6,31,0:1,3,4,2;5,7,8,6;9,13,15,14,16,17,18,11,12,10;19,21,25,24,23,22,20;26,33,31,29,32,28,30,27;34,39,38,36,37,35;40,41,43,42;44,45,47,46;49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,48:255,255,255",
    tunelGeometry = "-15,-11,-4,15,-11,-4,-15,12,-4,15,12,-4,15,-11,-6,-15,-11,-6,-15,12,-6,15,12,-6,8,12,-4,-8,12,-4,8,12,-6,-8,12,-6,2,-11,-4,-2,-11,-4,2,-11,-6,-2,-11,-6,20,0,-4,20,0,-6,-20,0,-4,-20,0,-6:9,11,8,4;2,17,18,5;4,8,18,17;3,7,12,10;5,15,13,2;3,19,20,7;1,6,20,19;16,6,1,14:0,255,255",
    obstacleGeometry = "18,0,0,8,0,4,8,0,-4,9,16,0,4,7,4,4,7,-4,-9,16,0,-4,7,4,-4,7,-4,-18,0,0,-8,0,4,-8,0,-4,-9,-16,0,-4,-7,4,-4,-7,-4,9,-16,0,4,-7,4,4,-7,-4:1,4,5,2;2,5,6,3;3,6,4,1;4,7,8,5;5,8,9,6;6,9,7,4;7,10,11,8;8,11,12,9;9,12,10,7;10,13,14,11;11,14,15,12;12,15,13,10;13,16,17,14;14,17,18,15;15,18,16,13;16,1,2,17;17,2,3,18;18,3,1,16:255,0,255",
    towerGeometry = "0,100,-10,19,0,-19,10,100,10,19,0,19,-10,100,-10,-19,0,-19,-10,100,10,-19,0,19,-17,115,20,-17,115,-20,-17,125,20,-17,125,-20,20,115,-17,17,115,20,20,125,-17,17,125,20,20,115,17,-20,115,17,20,125,17,-20,125,17,17,115,-20,20,100,20,17,125,-20,20,140,20,-20,115,-17,20,100,-20,-20,125,-17,20,140,-20,-20,100,20,-20,100,-20,-20,140,20,-20,140,-20:4,3,7,8;8,7,5,6;2,1,3,4;6,5,1,2;21,10,12,23;22,29,30,26;28,32,31,24;17,13,15,19;25,18,20,27;9,14,16,11;26,30,32,28;29,22,24,31;30,29,31,32;22,26,28,24:255,0,255",
    triangleGeometry = "-10,-10,0,10,-10,0,0,10,0:1,3,2:255,255,255",
    asteroidGeometry = "9,9,-19,10,-9,-18,10,9,20,9,-9,19,-10,9,-20,-10,-9,-19,-10,9,19,-9,-9,19,0,-10,-20,0,10,21,0,-10,21,0,10,-21,-10,-10,0,10,10,0,-10,10,0,10,-11,0,0,-13,0,0,12,0,9,0,-24,-10,0,24,10,0,24,-10,0,-24,0,0,-27,0,0,27,13,0,0,-13,0,0:18,15,7,10;24,10,7,20;26,15,5,22;17,16,4,11;25,14,3,21;23,12,1,19;22,5,12,23;13,17,11,8;21,3,10,24;14,18,10,3;1,12,18,14;6,9,17,13;19,1,14,25;9,2,16,17;20,7,15,26;12,5,15,18;8,20,26,13;2,19,25,16;4,21,24,11;6,22,23,9;9,23,19,2;16,25,21,4;13,26,22,6;11,24,20,8:255,0,255",
    moonGeometry = "0,10,0,-3,9,0,-6,7,0,-8,5,0,-9,1,0,-8,4,0,-6,6,0,-3,8,0,0,8,0,3,8,0,6,6,0,8,4,0,9,1,0,8,5,0,6,7,0,3,9,0:2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3:64,64,64",
    ufoGeometry = "0,-2,-10,0,2,-10,8,-2,-5,8,2,-5,8,-2,5,8,2,5,0,-2,10,0,2,10,-8,-2,5,-8,2,5,-8,-2,-5,-8,2,-5,0,2,-7,6,2,-2,4,2,5,-4,2,5,-6,2,-2,0,7,0:1,2,4,3;3,4,6,5;5,6,8,7;7,8,10,9;4,2,12,10,8,6;9,10,12,11;11,12,2,1;1,3,5,7,9,11;13,18,14;14,18,15;15,18,16;13,14,15,16,17;16,18,17;17,18,13:255,255,255",
    baseGeometry = "-78,-11,48,-69,18,40,27,18,38,78,-11,49,69,18,40,-24,40,32,24,40,32,-27,18,40,18,-11,-33,-18,-11,-34,-24,40,-15,24,40,-15,27,18,-23,-27,18,-24,-18,-11,-51,-78,-11,-51,-69,18,-33,-27,18,-33,78,-11,-51,18,-11,-51,27,18,-33,69,18,-33,-14,30,-19,14,30,-19,-16,18,-24,16,18,-23,-63,-1,-45,-60,7,-39,-34,-1,-45,-37,7,-39,34,-1,-45,37,7,-39,63,-1,-45,60,7,-39:1,2,17,16;6,11,14,8;8,14,18,17,2;19,22,5,4;3,13,12,7;5,22,21,13,3;15,10,9,20,19,4,1,16;7,12,11,6;19,20,21,22;15,16,17,18;9,10,14,11,12,13;1,4,5,3,7,6,8,2;20,9,13,21;18,14,10,15;25,23,24,26;27,28,30,29;31,32,34,33:255,0,255",
    
    playFX = (fx) => fx(),
    terminalSound = () => { zzfx(1, .05, 1373, .07, .05, .07, 3, .16, 0, 0, 292, .01, .07, 0, 0, 0, 0, 1, .12, 0) },
    clickSound = () => { zzfx(...[, 0, 709, .01, .02, .03, 1, .44, .1, 3.2, , .02, .01, , , , , .3, .04]) },
    terminalNoSound = () => { zzfx(...[1.03, 0, 207, , .04, , 1, 1.97, , , 207, .07, , , , .1, , .89, .08, .09]) },
    accessDenied = () => { zzfx([.5, , 284, .03, .07, .09, , 0, , , , , .04, , 20, , , .87, .03, , -1410]) },
    collision = () => { zzfx(...[, , 363, , .04, .01, , , , -77, 100, .45, .02, , 70, , , .55, .01, .2]) },
    explosion = () => { zzfx(...[1.1, , 32, .07, .24, .7, , 3.7, , , , , .11, .2, , .3, , .47, .29, .17]); },
    laser = () => { zzfx(...[.3, , 378, .1, , .7, 4, 2.5, 9, -7, , , , , , , .01, .8, , .05]) }, // Shoot 261

    loadMesh = (geometry, position = v3(), rotation = v3(), scale = v3(1, 1, 1), closePath = true, backfaceCulling = true, canColide = false) => {
        geometry = geometry.split(":");

        let verticesValues = geometry[0].split(",");
        let vertices = [];
        for (let i = 0; i < verticesValues.length; i += 3)
            vertices.push(v3(parseFloat(verticesValues[i]) / 10, parseFloat(verticesValues[i + 1]) / 10, parseFloat(verticesValues[i + 2]) / 10))

        let faces = geometry[1].split(";").map(indicesValues => indicesValues.split(",").map(k => parseInt(k) - 1));
        let color = `rgb(${geometry[2]})`;

        return { vertices, faces, color, position, rotation, scale, closePath, backfaceCulling, canColide };
    }


plane = (w, d, position, color = "rgb(255,255,255)", rotation = v3(), backfaceCulling = false, canColide = false) => ({
    vertices: [
        v3(-w / 2, 0, -d / 2),
        v3(w / 2, 0, -d / 2),
        v3(w / 2, 0, d / 2),
        v3(-w / 2, 0, d / 2)],
    faces:
        [[2, 3, 0, 1]],
    color,
    position,
    rotation,
    scale: v3(1.0, 1.0, 1.0),
    closePath: true,
    backfaceCulling,
    canColide
});

cube = (position, w, h, d, rotation = v3(), color) => ({
    vertices: [
        v3(-w / 2, -h / 2, -d / 2),
        v3(-w / 2, h / 2, -d / 2),
        v3(w / 2, h / 2, -d / 2),
        v3(w / 2, -h / 2, -d / 2),
        v3(w / 2, h / 2, d / 2),
        v3(w / 2, -h / 2, d / 2),
        v3(-w / 2, h / 2, d / 2),
        v3(-w / 2, -h / 2, d / 2)],
    faces: [
        [0, 1, 2, 3],
        [3, 2, 4, 5],
        [5, 4, 6, 7],
        [7, 6, 1, 0],
        [1, 6, 4, 2],
        [5, 7, 0, 3]],
    color: color,
    position: position,
    rotation: rotation,
    scale: v3(1.0, 1.0, 1.0),
    width: w,
    height: h,
    depth: d,
    closePath: true,
    backfaceCulling: true
}),
    setCollisionBox = (mesh) => {
        mesh.min = v3(Infinity, Infinity, Infinity);
        mesh.max = v3(-Infinity, -Infinity, -Infinity);
        let index = 0, count = mesh.vertices.length;
        while (index < count) {
            vertex = mesh.vertices[index];
            if (vertex.x + mesh.position.x < mesh.min.x) mesh.min.x = vertex.x + mesh.position.x;
            if (vertex.x + mesh.position.x > mesh.max.x) mesh.max.x = vertex.x + mesh.position.x;
            if (vertex.y + mesh.position.y < mesh.min.y) mesh.min.y = vertex.y + mesh.position.y;
            if (vertex.y + mesh.position.y > mesh.max.y) mesh.max.y = vertex.y + mesh.position.y;
            if (vertex.z + mesh.position.z < mesh.min.z) mesh.min.z = vertex.z + mesh.position.z;
            if (vertex.z + mesh.position.z > mesh.max.z) mesh.max.z = vertex.z + mesh.position.z;
            index++;
        }
    },

    intersect = (a, b) =>
        a.min.x <= b.max.x &&
        a.max.x >= b.min.x &&
        a.min.y <= b.max.y &&
        a.max.y >= b.min.y &&
        a.min.z <= b.max.z &&
        a.max.z >= b.min.z
